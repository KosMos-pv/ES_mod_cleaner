
import re
import json
from gzip import open as gOpen
from urllib import FancyURLopener
from time import (
    sleep,
    asctime
)
from os import (
    path,
    listdir,
    remove
)
from shutil import (
    rmtree,
    copy as filecopy
)


__version__ = (3, 0, 0)  # (majorVer, minorVer, patch)


class _ModsDataBase(FancyURLopener, object):

    WSLINK = (
        "https://steamcommunity.com/"
        "sharedfiles/filedetails/?l=russian&id={data}"
    )
    FIRST_MOD_ID = 354379109

    NOT_NAME_TITLE = u"Mod name is not detected (Dir id: {0})"

    HTML_UNESCAPE_TABLE = {
        u"&quot;": u'"',
        u"&amp;": u'&',
        u"&lt;": u'<',
        u"&gt;": u'>'
    }

    def __init__(self, cleaner_object):
        super(self.__class__, self).__init__()
        self.__cleaner = cleaner_object
        self._RE_TITLE = re.compile(
            r"(?<=\<div class=\"workshopItemTitle\"\>)[^\n]+(?=\</div\>)",
            flags=self.__cleaner.FLAGS
        )

        self._database_filename = path.abspath(
            path.join(self.__cleaner._basedir, u"mods_database.ws_cleaner")
        )

        if not path.isfile(self._database_filename):
            self.__database = {}
            self.backup_database()

        with gOpen(self._database_filename, "rb") as _file:
            self.__database = json.load(_file)

    def backup_database(self):

        name, _ = path.splitext(self._database_filename)
        name = u"{0}.temp_backup_".format(name)

        with gOpen(name, "wb") as _file:
            json.dump(self.__database, _file)
        filecopy(name, self._database_filename)
        remove(name)

    def get_mod_name(self, ws_id):

        if isinstance(ws_id, basestring) and ws_id.isdigit():
            ws_id = int(ws_id)
        elif isinstance(ws_id, int):
            pass
        else:
            return None

        if ws_id < self.FIRST_MOD_ID:
            return None

        ws_id = ws_id.__str__().decode("utf-8", "ignore")
        if ws_id in self.__database.iterkeys():
            return self.__database[ws_id]

        url = self.WSLINK.format(data=ws_id)
        try:
            page = self.open(url)
        except Exception:  # If troubles with internet.
            return self.NOT_NAME_TITLE.format(ws_id)

        page_text = page.read()
        page.close()
        if isinstance(page_text, str):
            page_text = page_text.decode("utf-8", "ignore")

        title = self._RE_TITLE.search(page_text)
        if title:
            title = title.group().strip()
            for old, new in self.HTML_UNESCAPE_TABLE.iteritems():
                title = title.replace(old, new)
            self.__database[ws_id] = u"\"{0}\"".format(title)
        else:
            self.__database[ws_id] = self.NOT_NAME_TITLE.format(ws_id)

        self.backup_database()
        return self.__database[ws_id]


class FolderCleaner(object):

    FLAGS = (re.DOTALL | re.UNICODE)

    def __init__(self, basedir, file_encoding):

        self._file_encoding = file_encoding

        if isinstance(basedir, str):
            basedir = basedir.decode(file_encoding)

        self._basedir = basedir

        self._logfile = path.abspath(path.join(basedir, u"deleted_mods.txt"))

        self.__original_bootstrap = self._renpy_dir("bootstrap.py")
        self.__original_bootstrap_backup = self.get_backup_filename()
        self.__actual_cleaner = self._renpy_dir("clean_workshop.py")

        self.__pyo_files = tuple(
            map(
                lambda x: "{0}.pyo".format(*path.splitext(x)),
                (self.__original_bootstrap, self.__actual_cleaner)
            )
        )
        self.__global_workshop_dir = path.abspath(
            path.join(path.dirname(path.dirname(basedir)), "workshop")
        )
        self.__es_workshop_dir = path.join(
            self.__global_workshop_dir,
            "content",
            "331470"
        )
        for p in (self.__global_workshop_dir, self.__es_workshop_dir):
            if not path.isdir(p):
                raise Exception(u"Directory \"{0}\" is not defined.".format(p))

        self.__modsDB = _ModsDataBase(cleaner_object=self)

    def start(self):
        if self.cleaner_is_installed():
            self.start_delete()
            return
        self.delete_self()

    def get_backup_filename(self):
        name, ext = path.splitext(self.__original_bootstrap)
        return u"{0}{1}".format(name, u"{0}_backup".format(ext))

    def _renpy_dir(self, filename):
        return path.abspath(path.join(self._basedir, "renpy", filename))

    def cleaner_is_installed(self):
        for p in listdir(self.__es_workshop_dir):
            p = p.decode(self._file_encoding, "ignore")
            if not p.strip():
                continue
            pth = path.abspath(path.join(self.__es_workshop_dir, p))
            if path.isdir(pth):
                full_pth = path.abspath(path.join(pth, "clean_workshop.py_"))
                if path.isfile(full_pth):
                    return True
        return False

    def parse_es_workshop_file(self):
        filename = path.join(
            self.__global_workshop_dir,
            "appworkshop_331470.acf"
        )
        if not path.isfile(filename):
            raise Exception(u"Workshop info-file is not defined.")
        with open(filename, "rb") as _file:
            str_data = _file.read()
        if not str_data:
            return {}
        str_data = str_data.decode("utf-8", "ignore")
        str_data = re.sub(
            r"(?<=\")(?=((\s+\{)|([\t ]+\")))",
            u':',
            str_data,
            flags=self.FLAGS
        )
        str_data = re.sub(
            r"(?<=[}\"])(?= *\n\s*[{\"])",
            u',',
            str_data,
            flags=self.FLAGS
        )
        str_data = re.sub(r"\s", u' ', str_data, flags=self.FLAGS)
        return json.loads(u"{{{0}}}".format(str_data))

    def start_delete(self):
        ws_file_data = self.parse_es_workshop_file()
        installed_mods = tuple(
            ws_file_data.get(
                u"AppWorkshop",
                {}
            ).get(
                u"WorkshopItemsInstalled",
                {}
            ).iterkeys()
        )
        for folder in listdir(self.__es_workshop_dir):
            folder = folder.decode(self._file_encoding, "ignore")
            if not folder.strip():
                continue
            full_path = path.abspath(path.join(self.__es_workshop_dir, folder))
            if not path.isdir(full_path):
                continue
            mod_name = self.__modsDB.get_mod_name(folder)
            if mod_name is None:
                continue
            if folder in installed_mods:
                continue

            try:
                rmtree(full_path)
            except Exception:
                self.add_log(mod_name, False)
            else:
                self.add_log(mod_name, True)
                sleep(1.)

    def add_log(self, mod_name, is_successfully_deleted):
        _date = asctime()
        if isinstance(_date, str):
            _date = _date.decode("utf-8", "ignore")
        if is_successfully_deleted:
            data = u"{0}\nSuccessfully deleted: {1}.\n\n"
        else:
            data = u"{0}\nAn error occurred while deleting the mod: {1}.\n\n"
        data = data.format(_date, mod_name).encode("utf-8", "ignore")
        with open(self._logfile, "ab") as logFile:
            logFile.write(data)

    def delete_self(self):
        _files_for_del = self.__pyo_files + (self.__actual_cleaner,)
        for f in _files_for_del:
            if path.isfile(f):
                remove(f)
                sleep(.5)
        if path.isfile(self.__original_bootstrap_backup):
            filecopy(
                self.__original_bootstrap_backup,
                self.__original_bootstrap
            )
            remove(self.__original_bootstrap_backup)
